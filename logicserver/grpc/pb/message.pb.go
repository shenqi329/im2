// Code generated by protoc-gen-go.
// source: message.proto
// DO NOT EDIT!

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CreateMessageRequest struct {
	Rid       uint64 `protobuf:"varint,1,opt,name=Rid,json=rid" json:"Rid,omitempty"`
	UserId    string `protobuf:"bytes,2,opt,name=UserId,json=userId" json:"UserId,omitempty"`
	SessionId int64  `protobuf:"varint,11,opt,name=SessionId,json=sessionId" json:"SessionId,omitempty"`
	Type      int32  `protobuf:"varint,12,opt,name=Type,json=type" json:"Type,omitempty"`
	Content   string `protobuf:"bytes,13,opt,name=Content,json=content" json:"Content,omitempty"`
	Id        string `protobuf:"bytes,14,opt,name=Id,json=id" json:"Id,omitempty"`
}

func (m *CreateMessageRequest) Reset()                    { *m = CreateMessageRequest{} }
func (m *CreateMessageRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateMessageRequest) ProtoMessage()               {}
func (*CreateMessageRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *CreateMessageRequest) GetRid() uint64 {
	if m != nil {
		return m.Rid
	}
	return 0
}

func (m *CreateMessageRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *CreateMessageRequest) GetSessionId() int64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *CreateMessageRequest) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *CreateMessageRequest) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *CreateMessageRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type CreateMessageResponse struct {
	Rid  uint64 `protobuf:"varint,1,opt,name=rid" json:"rid,omitempty"`
	Code string `protobuf:"bytes,2,opt,name=code" json:"code,omitempty"`
	Desc string `protobuf:"bytes,3,opt,name=desc" json:"desc,omitempty"`
}

func (m *CreateMessageResponse) Reset()                    { *m = CreateMessageResponse{} }
func (m *CreateMessageResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateMessageResponse) ProtoMessage()               {}
func (*CreateMessageResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *CreateMessageResponse) GetRid() uint64 {
	if m != nil {
		return m.Rid
	}
	return 0
}

func (m *CreateMessageResponse) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *CreateMessageResponse) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func init() {
	proto.RegisterType((*CreateMessageRequest)(nil), "pb.CreateMessageRequest")
	proto.RegisterType((*CreateMessageResponse)(nil), "pb.CreateMessageResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Message service

type MessageClient interface {
	// Sends a greeting
	CreateMessage(ctx context.Context, in *CreateMessageRequest, opts ...grpc.CallOption) (*CreateMessageResponse, error)
}

type messageClient struct {
	cc *grpc.ClientConn
}

func NewMessageClient(cc *grpc.ClientConn) MessageClient {
	return &messageClient{cc}
}

func (c *messageClient) CreateMessage(ctx context.Context, in *CreateMessageRequest, opts ...grpc.CallOption) (*CreateMessageResponse, error) {
	out := new(CreateMessageResponse)
	err := grpc.Invoke(ctx, "/pb.Message/CreateMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Message service

type MessageServer interface {
	// Sends a greeting
	CreateMessage(context.Context, *CreateMessageRequest) (*CreateMessageResponse, error)
}

func RegisterMessageServer(s *grpc.Server, srv MessageServer) {
	s.RegisterService(&_Message_serviceDesc, srv)
}

func _Message_CreateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).CreateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Message/CreateMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).CreateMessage(ctx, req.(*CreateMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Message_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Message",
	HandlerType: (*MessageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMessage",
			Handler:    _Message_CreateMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message.proto",
}

func init() { proto.RegisterFile("message.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 242 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x90, 0xb1, 0x4e, 0x84, 0x40,
	0x10, 0x86, 0x5d, 0x40, 0x08, 0xa3, 0x5c, 0xcc, 0x44, 0xcd, 0x68, 0x2c, 0x08, 0x15, 0x15, 0x85,
	0x3e, 0xc2, 0x25, 0x26, 0x14, 0x16, 0xb7, 0xea, 0x03, 0x1c, 0xec, 0xc4, 0x50, 0xc8, 0xae, 0xcc,
	0x5e, 0x71, 0xef, 0xe2, 0xc3, 0x1a, 0x96, 0xb3, 0xb8, 0xcb, 0x75, 0x33, 0xdf, 0x9f, 0xfc, 0xf9,
	0xf2, 0x43, 0xf1, 0xcd, 0x22, 0xdb, 0x2f, 0x6e, 0xdc, 0x64, 0xbd, 0xc5, 0xc8, 0x75, 0xd5, 0xaf,
	0x82, 0xdb, 0xf5, 0xc4, 0x5b, 0xcf, 0x6f, 0x4b, 0xa6, 0xf9, 0x67, 0xc7, 0xe2, 0xf1, 0x06, 0x62,
	0x3d, 0x18, 0x52, 0xa5, 0xaa, 0x13, 0x1d, 0x4f, 0x83, 0xc1, 0x7b, 0x48, 0x3f, 0x85, 0xa7, 0xd6,
	0x50, 0x54, 0xaa, 0x3a, 0xd7, 0xe9, 0x2e, 0x7c, 0xf8, 0x04, 0xf9, 0x3b, 0x8b, 0x0c, 0x76, 0x6c,
	0x0d, 0x5d, 0x95, 0xaa, 0x8e, 0x75, 0x2e, 0xff, 0x00, 0x11, 0x92, 0x8f, 0xbd, 0x63, 0xba, 0x2e,
	0x55, 0x7d, 0xa9, 0x13, 0xbf, 0x77, 0x8c, 0x04, 0xd9, 0xda, 0x8e, 0x9e, 0x47, 0x4f, 0x45, 0xa8,
	0xca, 0xfa, 0xe5, 0xc5, 0x15, 0x44, 0xad, 0xa1, 0x55, 0x80, 0xd1, 0x60, 0xaa, 0x0d, 0xdc, 0x9d,
	0xd8, 0x89, 0xb3, 0xa3, 0xf0, 0xac, 0x37, 0x1d, 0xeb, 0x21, 0x24, 0xbd, 0x35, 0x7c, 0x90, 0x0b,
	0xf7, 0xcc, 0x0c, 0x4b, 0x4f, 0xf1, 0xc2, 0xe6, 0xfb, 0x79, 0x03, 0xd9, 0xa1, 0x0c, 0x5f, 0xa1,
	0x38, 0x6a, 0x47, 0x6a, 0x5c, 0xd7, 0x9c, 0x9b, 0xe3, 0xf1, 0xe1, 0x4c, 0xb2, 0xa8, 0x54, 0x17,
	0x5d, 0x1a, 0xf6, 0x7c, 0xf9, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x0a, 0x5c, 0x5b, 0x78, 0x60, 0x01,
	0x00, 0x00,
}
