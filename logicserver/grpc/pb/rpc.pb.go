// Code generated by protoc-gen-go.
// source: rpc.proto
// DO NOT EDIT!

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RpcRequest struct {
	Rid         uint64 `protobuf:"varint,1,opt,name=Rid" json:"Rid,omitempty"`
	AppId       string `protobuf:"bytes,2,opt,name=AppId" json:"AppId,omitempty"`
	ConnId      uint64 `protobuf:"varint,3,opt,name=ConnId" json:"ConnId,omitempty"`
	UserId      string `protobuf:"bytes,4,opt,name=UserId" json:"UserId,omitempty"`
	Token       string `protobuf:"bytes,5,opt,name=Token" json:"Token,omitempty"`
	MessageType int32  `protobuf:"varint,11,opt,name=messageType" json:"messageType,omitempty"`
	ProtoBuf    []byte `protobuf:"bytes,12,opt,name=protoBuf,proto3" json:"protoBuf,omitempty"`
}

func (m *RpcRequest) Reset()                    { *m = RpcRequest{} }
func (m *RpcRequest) String() string            { return proto.CompactTextString(m) }
func (*RpcRequest) ProtoMessage()               {}
func (*RpcRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *RpcRequest) GetRid() uint64 {
	if m != nil {
		return m.Rid
	}
	return 0
}

func (m *RpcRequest) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *RpcRequest) GetConnId() uint64 {
	if m != nil {
		return m.ConnId
	}
	return 0
}

func (m *RpcRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *RpcRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *RpcRequest) GetMessageType() int32 {
	if m != nil {
		return m.MessageType
	}
	return 0
}

func (m *RpcRequest) GetProtoBuf() []byte {
	if m != nil {
		return m.ProtoBuf
	}
	return nil
}

type RpcResponse struct {
	Rid         uint64 `protobuf:"varint,1,opt,name=rid" json:"rid,omitempty"`
	Code        string `protobuf:"bytes,2,opt,name=code" json:"code,omitempty"`
	Desc        string `protobuf:"bytes,3,opt,name=desc" json:"desc,omitempty"`
	ConnId      uint64 `protobuf:"varint,4,opt,name=connId" json:"connId,omitempty"`
	MessageType int32  `protobuf:"varint,11,opt,name=messageType" json:"messageType,omitempty"`
	ProtoBuf    []byte `protobuf:"bytes,12,opt,name=protoBuf,proto3" json:"protoBuf,omitempty"`
}

func (m *RpcResponse) Reset()                    { *m = RpcResponse{} }
func (m *RpcResponse) String() string            { return proto.CompactTextString(m) }
func (*RpcResponse) ProtoMessage()               {}
func (*RpcResponse) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

func (m *RpcResponse) GetRid() uint64 {
	if m != nil {
		return m.Rid
	}
	return 0
}

func (m *RpcResponse) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *RpcResponse) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *RpcResponse) GetConnId() uint64 {
	if m != nil {
		return m.ConnId
	}
	return 0
}

func (m *RpcResponse) GetMessageType() int32 {
	if m != nil {
		return m.MessageType
	}
	return 0
}

func (m *RpcResponse) GetProtoBuf() []byte {
	if m != nil {
		return m.ProtoBuf
	}
	return nil
}

func init() {
	proto.RegisterType((*RpcRequest)(nil), "pb.RpcRequest")
	proto.RegisterType((*RpcResponse)(nil), "pb.RpcResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Rpc service

type RpcClient interface {
	// Sends a greeting
	Rpc(ctx context.Context, in *RpcRequest, opts ...grpc.CallOption) (*RpcResponse, error)
}

type rpcClient struct {
	cc *grpc.ClientConn
}

func NewRpcClient(cc *grpc.ClientConn) RpcClient {
	return &rpcClient{cc}
}

func (c *rpcClient) Rpc(ctx context.Context, in *RpcRequest, opts ...grpc.CallOption) (*RpcResponse, error) {
	out := new(RpcResponse)
	err := grpc.Invoke(ctx, "/pb.Rpc/Rpc", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Rpc service

type RpcServer interface {
	// Sends a greeting
	Rpc(context.Context, *RpcRequest) (*RpcResponse, error)
}

func RegisterRpcServer(s *grpc.Server, srv RpcServer) {
	s.RegisterService(&_Rpc_serviceDesc, srv)
}

func _Rpc_Rpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).Rpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Rpc/Rpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).Rpc(ctx, req.(*RpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Rpc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Rpc",
	HandlerType: (*RpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Rpc",
			Handler:    _Rpc_Rpc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 249 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x90, 0x41, 0x4e, 0xc3, 0x30,
	0x10, 0x45, 0x71, 0x9b, 0x54, 0x64, 0x52, 0x01, 0xb2, 0x10, 0xb2, 0xba, 0xb2, 0xb2, 0xf2, 0x2a,
	0x48, 0x70, 0x02, 0x60, 0x95, 0xad, 0x55, 0x0e, 0x40, 0xec, 0x01, 0x55, 0x88, 0x78, 0xb0, 0xdb,
	0x05, 0x87, 0xe1, 0x1e, 0x1c, 0x0f, 0x79, 0x1c, 0xb5, 0xec, 0x59, 0xe5, 0xbf, 0xaf, 0xc9, 0xe8,
	0x8d, 0xa1, 0x89, 0xe4, 0x7a, 0x8a, 0x61, 0x1f, 0xe4, 0x82, 0xc6, 0xee, 0x47, 0x00, 0x58, 0x72,
	0x16, 0x3f, 0x0f, 0x98, 0xf6, 0xf2, 0x0a, 0x96, 0x76, 0xe7, 0x95, 0xd0, 0xc2, 0x54, 0x36, 0x47,
	0x79, 0x0d, 0xf5, 0x03, 0xd1, 0xe0, 0xd5, 0x42, 0x0b, 0xd3, 0xd8, 0x02, 0xf2, 0x06, 0x56, 0x4f,
	0x61, 0x9a, 0x06, 0xaf, 0x96, 0x3c, 0x3a, 0x53, 0xee, 0x9f, 0x13, 0xc6, 0xc1, 0xab, 0x8a, 0xc7,
	0x67, 0xca, 0x5b, 0xb6, 0xe1, 0x1d, 0x27, 0x55, 0x97, 0x2d, 0x0c, 0x52, 0x43, 0xfb, 0x81, 0x29,
	0xbd, 0xbc, 0xe1, 0xf6, 0x8b, 0x50, 0xb5, 0x5a, 0x98, 0xda, 0xfe, 0xad, 0xe4, 0x06, 0xce, 0xd9,
	0xf5, 0xf1, 0xf0, 0xaa, 0xd6, 0x5a, 0x98, 0xb5, 0x3d, 0x72, 0xf7, 0x2d, 0xa0, 0x65, 0xf5, 0x44,
	0x61, 0x4a, 0x98, 0xdd, 0xe3, 0xc9, 0x3d, 0xee, 0xbc, 0x94, 0x50, 0xb9, 0xe0, 0x71, 0x56, 0xe7,
	0x9c, 0x3b, 0x8f, 0xc9, 0xb1, 0x77, 0x63, 0x39, 0x67, 0x6b, 0x57, 0xae, 0xa9, 0xca, 0x35, 0x85,
	0xfe, 0xe7, 0x77, 0x77, 0x0b, 0x4b, 0x4b, 0x4e, 0x9a, 0xf2, 0xb9, 0xe8, 0x69, 0xec, 0x4f, 0x2f,
	0xbd, 0xb9, 0x3c, 0x72, 0xd1, 0xef, 0xce, 0xc6, 0x15, 0xff, 0x7a, 0xff, 0x1b, 0x00, 0x00, 0xff,
	0xff, 0xfb, 0x45, 0xbb, 0x74, 0xa3, 0x01, 0x00, 0x00,
}
