// Code generated by protoc-gen-go.
// source: session.proto
// DO NOT EDIT!

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SessionInfo struct {
	SessionId uint64 `protobuf:"varint,1,opt,name=SessionId" json:"SessionId,omitempty"`
}

func (m *SessionInfo) Reset()                    { *m = SessionInfo{} }
func (m *SessionInfo) String() string            { return proto.CompactTextString(m) }
func (*SessionInfo) ProtoMessage()               {}
func (*SessionInfo) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *SessionInfo) GetSessionId() uint64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

type CreateSessionRequest struct {
	Rid    uint64 `protobuf:"varint,1,opt,name=Rid" json:"Rid,omitempty"`
	UserId string `protobuf:"bytes,2,opt,name=UserId" json:"UserId,omitempty"`
	AppId  string `protobuf:"bytes,11,opt,name=AppId" json:"AppId,omitempty"`
	Count  int32  `protobuf:"varint,12,opt,name=Count" json:"Count,omitempty"`
}

func (m *CreateSessionRequest) Reset()                    { *m = CreateSessionRequest{} }
func (m *CreateSessionRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateSessionRequest) ProtoMessage()               {}
func (*CreateSessionRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

func (m *CreateSessionRequest) GetRid() uint64 {
	if m != nil {
		return m.Rid
	}
	return 0
}

func (m *CreateSessionRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *CreateSessionRequest) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *CreateSessionRequest) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type CreateSessionResponse struct {
	Rid        uint64         `protobuf:"varint,1,opt,name=Rid" json:"Rid,omitempty"`
	Code       string         `protobuf:"bytes,2,opt,name=Code" json:"Code,omitempty"`
	Desc       string         `protobuf:"bytes,3,opt,name=Desc" json:"Desc,omitempty"`
	SessionIds []*SessionInfo `protobuf:"bytes,11,rep,name=SessionIds" json:"SessionIds,omitempty"`
}

func (m *CreateSessionResponse) Reset()                    { *m = CreateSessionResponse{} }
func (m *CreateSessionResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateSessionResponse) ProtoMessage()               {}
func (*CreateSessionResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{2} }

func (m *CreateSessionResponse) GetRid() uint64 {
	if m != nil {
		return m.Rid
	}
	return 0
}

func (m *CreateSessionResponse) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *CreateSessionResponse) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *CreateSessionResponse) GetSessionIds() []*SessionInfo {
	if m != nil {
		return m.SessionIds
	}
	return nil
}

func init() {
	proto.RegisterType((*SessionInfo)(nil), "pb.SessionInfo")
	proto.RegisterType((*CreateSessionRequest)(nil), "pb.CreateSessionRequest")
	proto.RegisterType((*CreateSessionResponse)(nil), "pb.CreateSessionResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Session service

type SessionClient interface {
	// Sends a greeting
	CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionResponse, error)
}

type sessionClient struct {
	cc *grpc.ClientConn
}

func NewSessionClient(cc *grpc.ClientConn) SessionClient {
	return &sessionClient{cc}
}

func (c *sessionClient) CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionResponse, error) {
	out := new(CreateSessionResponse)
	err := grpc.Invoke(ctx, "/pb.Session/CreateSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Session service

type SessionServer interface {
	// Sends a greeting
	CreateSession(context.Context, *CreateSessionRequest) (*CreateSessionResponse, error)
}

func RegisterSessionServer(s *grpc.Server, srv SessionServer) {
	s.RegisterService(&_Session_serviceDesc, srv)
}

func _Session_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServer).CreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Session/CreateSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServer).CreateSession(ctx, req.(*CreateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Session_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Session",
	HandlerType: (*SessionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSession",
			Handler:    _Session_CreateSession_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "session.proto",
}

func init() { proto.RegisterFile("session.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 238 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x90, 0xd1, 0x4a, 0xc4, 0x30,
	0x10, 0x45, 0xcd, 0x76, 0x77, 0x65, 0xa7, 0x2e, 0xca, 0xb0, 0x4a, 0x14, 0x1f, 0x4a, 0x9f, 0x0a,
	0x42, 0x85, 0xf5, 0x0b, 0xa4, 0x22, 0xf4, 0xd1, 0x88, 0x1f, 0x60, 0xcd, 0x08, 0x0b, 0x92, 0xc4,
	0x4e, 0xf6, 0x07, 0xfc, 0x72, 0x49, 0x93, 0xd5, 0x2a, 0x7d, 0xbb, 0xf7, 0x64, 0xc2, 0x9d, 0xb9,
	0xb0, 0x66, 0x62, 0xde, 0x59, 0x53, 0xbb, 0xde, 0x7a, 0x8b, 0x33, 0xd7, 0x95, 0x37, 0x90, 0x3f,
	0x47, 0xd8, 0x9a, 0x77, 0x8b, 0xd7, 0xb0, 0x3a, 0x58, 0x2d, 0x45, 0x21, 0xaa, 0xb9, 0xfa, 0x05,
	0xe5, 0x07, 0x6c, 0x9a, 0x9e, 0x5e, 0x3d, 0x25, 0xa4, 0xe8, 0x73, 0x4f, 0xec, 0xf1, 0x0c, 0x32,
	0xb5, 0x3b, 0xcc, 0x07, 0x89, 0x17, 0xb0, 0x7c, 0x61, 0xea, 0x5b, 0x2d, 0x67, 0x85, 0xa8, 0x56,
	0x2a, 0x39, 0xdc, 0xc0, 0xe2, 0xde, 0xb9, 0x56, 0xcb, 0x7c, 0xc0, 0xd1, 0x04, 0xda, 0xd8, 0xbd,
	0xf1, 0xf2, 0xa4, 0x10, 0xd5, 0x42, 0x45, 0x53, 0x7e, 0x09, 0x38, 0xff, 0x17, 0xc7, 0xce, 0x1a,
	0xa6, 0x89, 0x3c, 0x84, 0x79, 0x63, 0x35, 0xa5, 0xb4, 0x41, 0x07, 0xf6, 0x40, 0xfc, 0x26, 0xb3,
	0xc8, 0x82, 0xc6, 0x5b, 0x80, 0x9f, 0x73, 0x58, 0xe6, 0x45, 0x56, 0xe5, 0xdb, 0xd3, 0xda, 0x75,
	0xf5, 0xa8, 0x04, 0x35, 0x1a, 0xd9, 0x3e, 0xc1, 0x71, 0x72, 0xf8, 0x08, 0xeb, 0x3f, 0xeb, 0xa0,
	0x0c, 0x1f, 0xa7, 0x0a, 0xb9, 0xba, 0x9c, 0x78, 0x89, 0xbb, 0x97, 0x47, 0xdd, 0x72, 0x68, 0xff,
	0xee, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xef, 0xef, 0xc6, 0xd8, 0x8e, 0x01, 0x00, 0x00,
}
