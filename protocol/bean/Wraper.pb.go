// Code generated by protoc-gen-go.
// source: Wraper.proto
// DO NOT EDIT!

package bean

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// messageType = 1
type WraperMessage struct {
	ConnId     uint64 `protobuf:"varint,1,opt,name=connId" json:"connId,omitempty"`
	Message    []byte `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	IsLoginIn  bool   `protobuf:"varint,3,opt,name=isLoginIn" json:"isLoginIn,omitempty"`
	IsLoginOut bool   `protobuf:"varint,4,opt,name=isLoginOut" json:"isLoginOut,omitempty"`
}

func (m *WraperMessage) Reset()                    { *m = WraperMessage{} }
func (m *WraperMessage) String() string            { return proto.CompactTextString(m) }
func (*WraperMessage) ProtoMessage()               {}
func (*WraperMessage) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *WraperMessage) GetConnId() uint64 {
	if m != nil {
		return m.ConnId
	}
	return 0
}

func (m *WraperMessage) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *WraperMessage) GetIsLoginIn() bool {
	if m != nil {
		return m.IsLoginIn
	}
	return false
}

func (m *WraperMessage) GetIsLoginOut() bool {
	if m != nil {
		return m.IsLoginOut
	}
	return false
}

func init() {
	proto.RegisterType((*WraperMessage)(nil), "bean.WraperMessage")
}

func init() { proto.RegisterFile("Wraper.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 133 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x09, 0x2f, 0x4a, 0x2c,
	0x48, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x49, 0x4a, 0x4d, 0xcc, 0x53, 0xaa,
	0xe7, 0xe2, 0x85, 0x88, 0xfa, 0xa6, 0x16, 0x17, 0x27, 0xa6, 0xa7, 0x0a, 0x89, 0x71, 0xb1, 0x25,
	0xe7, 0xe7, 0xe5, 0x79, 0xa6, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0xb0, 0x04, 0x41, 0x79, 0x42, 0x12,
	0x5c, 0xec, 0xb9, 0x10, 0x25, 0x12, 0x4c, 0x0a, 0x8c, 0x1a, 0x3c, 0x41, 0x30, 0xae, 0x90, 0x0c,
	0x17, 0x67, 0x66, 0xb1, 0x4f, 0x7e, 0x7a, 0x66, 0x9e, 0x67, 0x9e, 0x04, 0xb3, 0x02, 0xa3, 0x06,
	0x47, 0x10, 0x42, 0x40, 0x48, 0x8e, 0x8b, 0x0b, 0xca, 0xf1, 0x2f, 0x2d, 0x91, 0x60, 0x01, 0x4b,
	0x23, 0x89, 0x24, 0xb1, 0x81, 0x5d, 0x63, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0xf2, 0x40, 0xf0,
	0x29, 0x9d, 0x00, 0x00, 0x00,
}
