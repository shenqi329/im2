// Code generated by protoc-gen-go.
// source: session.proto
// DO NOT EDIT!

package client

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Session struct {
	SessionId uint64 `protobuf:"varint,11,opt,name=sessionId" json:"sessionId,omitempty"`
}

func (m *Session) Reset()                    { *m = Session{} }
func (m *Session) String() string            { return proto.CompactTextString(m) }
func (*Session) ProtoMessage()               {}
func (*Session) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *Session) GetSessionId() uint64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

type CreateSessionRequest struct {
	Rid          uint64 `protobuf:"varint,1,opt,name=rid" json:"rid,omitempty"`
	AppId        string `protobuf:"bytes,11,opt,name=appId" json:"appId,omitempty"`
	CreateUserId string `protobuf:"bytes,12,opt,name=createUserId" json:"createUserId,omitempty"`
	Count        int32  `protobuf:"varint,13,opt,name=count" json:"count,omitempty"`
}

func (m *CreateSessionRequest) Reset()                    { *m = CreateSessionRequest{} }
func (m *CreateSessionRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateSessionRequest) ProtoMessage()               {}
func (*CreateSessionRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

func (m *CreateSessionRequest) GetRid() uint64 {
	if m != nil {
		return m.Rid
	}
	return 0
}

func (m *CreateSessionRequest) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *CreateSessionRequest) GetCreateUserId() string {
	if m != nil {
		return m.CreateUserId
	}
	return ""
}

func (m *CreateSessionRequest) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type CreateSessionResponse struct {
	Rid        uint64     `protobuf:"varint,1,opt,name=rid" json:"rid,omitempty"`
	Code       string     `protobuf:"bytes,2,opt,name=code" json:"code,omitempty"`
	Desc       string     `protobuf:"bytes,3,opt,name=desc" json:"desc,omitempty"`
	SessionIds []*Session `protobuf:"bytes,11,rep,name=sessionIds" json:"sessionIds,omitempty"`
}

func (m *CreateSessionResponse) Reset()                    { *m = CreateSessionResponse{} }
func (m *CreateSessionResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateSessionResponse) ProtoMessage()               {}
func (*CreateSessionResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{2} }

func (m *CreateSessionResponse) GetRid() uint64 {
	if m != nil {
		return m.Rid
	}
	return 0
}

func (m *CreateSessionResponse) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *CreateSessionResponse) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *CreateSessionResponse) GetSessionIds() []*Session {
	if m != nil {
		return m.SessionIds
	}
	return nil
}

func init() {
	proto.RegisterType((*Session)(nil), "client.Session")
	proto.RegisterType((*CreateSessionRequest)(nil), "client.CreateSessionRequest")
	proto.RegisterType((*CreateSessionResponse)(nil), "client.CreateSessionResponse")
}

func init() { proto.RegisterFile("session.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 216 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x90, 0xcd, 0x4a, 0xc5, 0x30,
	0x10, 0x85, 0x89, 0xbd, 0xf7, 0x4a, 0xa7, 0x2d, 0x4a, 0xa8, 0x90, 0x85, 0x8b, 0x92, 0x8d, 0x5d,
	0x55, 0xd0, 0x47, 0x70, 0xd5, 0x6d, 0xc4, 0x07, 0xa8, 0xc9, 0x2c, 0x0a, 0x92, 0xc4, 0x4c, 0x0a,
	0xae, 0x7d, 0x72, 0x49, 0x52, 0x7f, 0x71, 0x77, 0xe6, 0xcc, 0x37, 0x73, 0x98, 0x81, 0x8e, 0x90,
	0x68, 0x75, 0x76, 0xf2, 0xc1, 0x45, 0xc7, 0x4f, 0xfa, 0x65, 0x45, 0x1b, 0xe5, 0x0d, 0x9c, 0x3f,
	0x96, 0x06, 0xbf, 0x86, 0x7a, 0x67, 0x66, 0x23, 0x9a, 0x81, 0x8d, 0x07, 0xf5, 0x6d, 0xc8, 0x37,
	0xe8, 0x1f, 0x02, 0x2e, 0x11, 0x77, 0x5c, 0xe1, 0xeb, 0x86, 0x14, 0xf9, 0x25, 0x54, 0x61, 0x35,
	0x82, 0x65, 0x3e, 0x49, 0xde, 0xc3, 0x71, 0xf1, 0x7e, 0xdf, 0x51, 0xab, 0x52, 0x70, 0x09, 0xad,
	0xce, 0xf3, 0x4f, 0x84, 0x61, 0x36, 0xa2, 0xcd, 0xcd, 0x5f, 0x5e, 0x9a, 0xd4, 0x6e, 0xb3, 0x51,
	0x74, 0x03, 0x1b, 0x8f, 0xaa, 0x14, 0xf2, 0x9d, 0xc1, 0xd5, 0x9f, 0x68, 0xf2, 0xce, 0x12, 0xfe,
	0x93, 0xcd, 0xe1, 0xa0, 0x9d, 0x41, 0x71, 0x96, 0xb7, 0x67, 0x9d, 0x3c, 0x83, 0xa4, 0x45, 0x55,
	0xbc, 0xa4, 0xf9, 0x2d, 0xc0, 0xd7, 0x69, 0x24, 0x9a, 0xa1, 0x1a, 0x9b, 0xbb, 0x8b, 0xa9, 0xfc,
	0x64, 0xfa, 0x8c, 0xf9, 0x81, 0x3c, 0x9f, 0xf2, 0xdb, 0xee, 0x3f, 0x02, 0x00, 0x00, 0xff, 0xff,
	0x73, 0x72, 0xaa, 0x47, 0x47, 0x01, 0x00, 0x00,
}
