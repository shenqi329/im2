// Code generated by protoc-gen-go.
// source: rpc.proto
// DO NOT EDIT!

package client

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RpcRequest_ToServerType int32

const (
	RpcRequest_BusinessServer RpcRequest_ToServerType = 0
	RpcRequest_LogicServer    RpcRequest_ToServerType = 1
)

var RpcRequest_ToServerType_name = map[int32]string{
	0: "BusinessServer",
	1: "LogicServer",
}
var RpcRequest_ToServerType_value = map[string]int32{
	"BusinessServer": 0,
	"LogicServer":    1,
}

func (x RpcRequest_ToServerType) String() string {
	return proto.EnumName(RpcRequest_ToServerType_name, int32(x))
}
func (RpcRequest_ToServerType) EnumDescriptor() ([]byte, []int) { return fileDescriptor3, []int{0, 0} }

type RpcRequest struct {
	Rid         uint64                  `protobuf:"varint,1,opt,name=rid" json:"rid,omitempty"`
	Type        RpcRequest_ToServerType `protobuf:"varint,2,opt,name=type,enum=client.RpcRequest_ToServerType" json:"type,omitempty"`
	AppId       string                  `protobuf:"bytes,3,opt,name=appId" json:"appId,omitempty"`
	MessageType int32                   `protobuf:"varint,12,opt,name=messageType" json:"messageType,omitempty"`
	ProtoBuf    []byte                  `protobuf:"bytes,13,opt,name=protoBuf,proto3" json:"protoBuf,omitempty"`
	ConnId      uint64                  `protobuf:"varint,14,opt,name=connId" json:"connId,omitempty"`
}

func (m *RpcRequest) Reset()                    { *m = RpcRequest{} }
func (m *RpcRequest) String() string            { return proto.CompactTextString(m) }
func (*RpcRequest) ProtoMessage()               {}
func (*RpcRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *RpcRequest) GetRid() uint64 {
	if m != nil {
		return m.Rid
	}
	return 0
}

func (m *RpcRequest) GetType() RpcRequest_ToServerType {
	if m != nil {
		return m.Type
	}
	return RpcRequest_BusinessServer
}

func (m *RpcRequest) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *RpcRequest) GetMessageType() int32 {
	if m != nil {
		return m.MessageType
	}
	return 0
}

func (m *RpcRequest) GetProtoBuf() []byte {
	if m != nil {
		return m.ProtoBuf
	}
	return nil
}

func (m *RpcRequest) GetConnId() uint64 {
	if m != nil {
		return m.ConnId
	}
	return 0
}

type RpcResponse struct {
	Rid         uint64 `protobuf:"varint,1,opt,name=rid" json:"rid,omitempty"`
	Code        string `protobuf:"bytes,2,opt,name=code" json:"code,omitempty"`
	Desc        string `protobuf:"bytes,3,opt,name=desc" json:"desc,omitempty"`
	MessageType int32  `protobuf:"varint,11,opt,name=messageType" json:"messageType,omitempty"`
	ProtoBuf    []byte `protobuf:"bytes,12,opt,name=protoBuf,proto3" json:"protoBuf,omitempty"`
	ConnId      uint64 `protobuf:"varint,13,opt,name=connId" json:"connId,omitempty"`
}

func (m *RpcResponse) Reset()                    { *m = RpcResponse{} }
func (m *RpcResponse) String() string            { return proto.CompactTextString(m) }
func (*RpcResponse) ProtoMessage()               {}
func (*RpcResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *RpcResponse) GetRid() uint64 {
	if m != nil {
		return m.Rid
	}
	return 0
}

func (m *RpcResponse) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *RpcResponse) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *RpcResponse) GetMessageType() int32 {
	if m != nil {
		return m.MessageType
	}
	return 0
}

func (m *RpcResponse) GetProtoBuf() []byte {
	if m != nil {
		return m.ProtoBuf
	}
	return nil
}

func (m *RpcResponse) GetConnId() uint64 {
	if m != nil {
		return m.ConnId
	}
	return 0
}

func init() {
	proto.RegisterType((*RpcRequest)(nil), "client.RpcRequest")
	proto.RegisterType((*RpcResponse)(nil), "client.RpcResponse")
	proto.RegisterEnum("client.RpcRequest_ToServerType", RpcRequest_ToServerType_name, RpcRequest_ToServerType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Rpc service

type RpcClient interface {
	// Sends a greeting
	Rpc(ctx context.Context, in *RpcRequest, opts ...grpc.CallOption) (*RpcResponse, error)
}

type rpcClient struct {
	cc *grpc.ClientConn
}

func NewRpcClient(cc *grpc.ClientConn) RpcClient {
	return &rpcClient{cc}
}

func (c *rpcClient) Rpc(ctx context.Context, in *RpcRequest, opts ...grpc.CallOption) (*RpcResponse, error) {
	out := new(RpcResponse)
	err := grpc.Invoke(ctx, "/client.Rpc/Rpc", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Rpc service

type RpcServer interface {
	// Sends a greeting
	Rpc(context.Context, *RpcRequest) (*RpcResponse, error)
}

func RegisterRpcServer(s *grpc.Server, srv RpcServer) {
	s.RegisterService(&_Rpc_serviceDesc, srv)
}

func _Rpc_Rpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).Rpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client.Rpc/Rpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).Rpc(ctx, req.(*RpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Rpc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "client.Rpc",
	HandlerType: (*RpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Rpc",
			Handler:    _Rpc_Rpc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 298 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x90, 0x4f, 0x6a, 0xeb, 0x30,
	0x10, 0x87, 0xa3, 0x97, 0xc4, 0x24, 0x63, 0x27, 0x2f, 0x4c, 0x43, 0x11, 0xd9, 0x54, 0x78, 0xe5,
	0x95, 0x29, 0xc9, 0xa2, 0x7b, 0xef, 0x02, 0x2d, 0x04, 0x35, 0x17, 0x48, 0xe5, 0x69, 0x30, 0xb4,
	0x96, 0x6a, 0xd9, 0x85, 0x1c, 0xa6, 0xb7, 0xec, 0x01, 0x8a, 0x25, 0xd3, 0xba, 0x7f, 0x57, 0x9a,
	0xf9, 0x98, 0x61, 0x7e, 0x9f, 0x60, 0x5a, 0x19, 0x95, 0x9a, 0x4a, 0xd7, 0x1a, 0x03, 0xf5, 0x50,
	0x50, 0x59, 0xc7, 0xaf, 0x0c, 0x40, 0x1a, 0x25, 0xe9, 0xa9, 0x21, 0x5b, 0xe3, 0x02, 0x86, 0x55,
	0x91, 0x73, 0x26, 0x58, 0x32, 0x92, 0x6d, 0x89, 0x1b, 0x18, 0xd5, 0x27, 0x43, 0xfc, 0x9f, 0x60,
	0xc9, 0x7c, 0x7d, 0x91, 0xfa, 0xbd, 0xf4, 0x63, 0x27, 0xdd, 0xeb, 0x5b, 0xaa, 0x9e, 0xa9, 0xda,
	0x9f, 0x0c, 0x49, 0x37, 0x8c, 0x4b, 0x18, 0x1f, 0x8c, 0xd9, 0xe6, 0x7c, 0x28, 0x58, 0x32, 0x95,
	0xbe, 0x41, 0x01, 0xe1, 0x23, 0x59, 0x7b, 0x38, 0x52, 0x3b, 0xca, 0x23, 0xc1, 0x92, 0xb1, 0xec,
	0x23, 0x5c, 0xc1, 0xc4, 0xc5, 0xcb, 0x9a, 0x7b, 0x3e, 0x13, 0x2c, 0x89, 0xe4, 0x7b, 0x8f, 0xe7,
	0x10, 0x28, 0x5d, 0x96, 0xdb, 0x9c, 0xcf, 0x5d, 0xba, 0xae, 0x8b, 0x37, 0x10, 0xf5, 0x13, 0x20,
	0xc2, 0x3c, 0x6b, 0x6c, 0x51, 0x92, 0xb5, 0x9e, 0x2e, 0x06, 0xf8, 0x1f, 0xc2, 0x6b, 0x7d, 0x2c,
	0x54, 0x07, 0x58, 0xfc, 0xc2, 0x20, 0x74, 0x0a, 0xd6, 0xe8, 0xd2, 0xd2, 0x0f, 0xde, 0x08, 0x23,
	0xa5, 0x73, 0xef, 0x3d, 0x95, 0xae, 0x6e, 0x59, 0x4e, 0x56, 0x75, 0x56, 0xae, 0xfe, 0x2a, 0x15,
	0xfe, 0x2d, 0x15, 0xfd, 0x2a, 0x35, 0xeb, 0x4b, 0xad, 0xaf, 0x60, 0x28, 0x8d, 0xc2, 0x4b, 0xff,
	0xe0, 0xf7, 0x5f, 0x5f, 0x9d, 0x7d, 0x62, 0x5e, 0x23, 0x1e, 0x64, 0x4b, 0x08, 0xb6, 0x37, 0x2d,
	0xcb, 0x26, 0xd2, 0xa8, 0x5d, 0x7b, 0x67, 0xc7, 0xee, 0x02, 0x77, 0x70, 0xf3, 0x16, 0x00, 0x00,
	0xff, 0xff, 0x75, 0xd1, 0x0c, 0x20, 0x01, 0x02, 0x00, 0x00,
}
