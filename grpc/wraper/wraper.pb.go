// Code generated by protoc-gen-go.
// source: wraper.proto
// DO NOT EDIT!

/*
Package wraper is a generated protocol buffer package.

It is generated from these files:
	wraper.proto

It has these top-level messages:
	WraperMessageRequest
	WraperMessageReply
*/
package wraper

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type WraperMessageRequest struct {
	ConnId     uint64 `protobuf:"varint,1,opt,name=connId" json:"connId,omitempty"`
	Message    []byte `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	IsLoginIn  bool   `protobuf:"varint,3,opt,name=isLoginIn" json:"isLoginIn,omitempty"`
	IsLoginOut bool   `protobuf:"varint,4,opt,name=isLoginOut" json:"isLoginOut,omitempty"`
}

func (m *WraperMessageRequest) Reset()                    { *m = WraperMessageRequest{} }
func (m *WraperMessageRequest) String() string            { return proto.CompactTextString(m) }
func (*WraperMessageRequest) ProtoMessage()               {}
func (*WraperMessageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *WraperMessageRequest) GetConnId() uint64 {
	if m != nil {
		return m.ConnId
	}
	return 0
}

func (m *WraperMessageRequest) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *WraperMessageRequest) GetIsLoginIn() bool {
	if m != nil {
		return m.IsLoginIn
	}
	return false
}

func (m *WraperMessageRequest) GetIsLoginOut() bool {
	if m != nil {
		return m.IsLoginOut
	}
	return false
}

type WraperMessageReply struct {
	ConnId uint64 `protobuf:"varint,1,opt,name=connId" json:"connId,omitempty"`
}

func (m *WraperMessageReply) Reset()                    { *m = WraperMessageReply{} }
func (m *WraperMessageReply) String() string            { return proto.CompactTextString(m) }
func (*WraperMessageReply) ProtoMessage()               {}
func (*WraperMessageReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *WraperMessageReply) GetConnId() uint64 {
	if m != nil {
		return m.ConnId
	}
	return 0
}

func init() {
	proto.RegisterType((*WraperMessageRequest)(nil), "wraper.WraperMessageRequest")
	proto.RegisterType((*WraperMessageReply)(nil), "wraper.WraperMessageReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Wraper service

type WraperClient interface {
	// Sends a greeting
	Wraper(ctx context.Context, in *WraperMessageRequest, opts ...grpc.CallOption) (*WraperMessageReply, error)
}

type wraperClient struct {
	cc *grpc.ClientConn
}

func NewWraperClient(cc *grpc.ClientConn) WraperClient {
	return &wraperClient{cc}
}

func (c *wraperClient) Wraper(ctx context.Context, in *WraperMessageRequest, opts ...grpc.CallOption) (*WraperMessageReply, error) {
	out := new(WraperMessageReply)
	err := grpc.Invoke(ctx, "/wraper.Wraper/Wraper", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Wraper service

type WraperServer interface {
	// Sends a greeting
	Wraper(context.Context, *WraperMessageRequest) (*WraperMessageReply, error)
}

func RegisterWraperServer(s *grpc.Server, srv WraperServer) {
	s.RegisterService(&_Wraper_serviceDesc, srv)
}

func _Wraper_Wraper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WraperMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WraperServer).Wraper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wraper.Wraper/Wraper",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WraperServer).Wraper(ctx, req.(*WraperMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Wraper_serviceDesc = grpc.ServiceDesc{
	ServiceName: "wraper.Wraper",
	HandlerType: (*WraperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Wraper",
			Handler:    _Wraper_Wraper_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wraper.proto",
}

func init() { proto.RegisterFile("wraper.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 194 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x2f, 0x4a, 0x2c,
	0x48, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x83, 0xf0, 0x94, 0xda, 0x18, 0xb9,
	0x44, 0xc2, 0xc1, 0x4c, 0xdf, 0xd4, 0xe2, 0xe2, 0xc4, 0xf4, 0xd4, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4,
	0xe2, 0x12, 0x21, 0x31, 0x2e, 0xb6, 0xe4, 0xfc, 0xbc, 0x3c, 0xcf, 0x14, 0x09, 0x46, 0x05, 0x46,
	0x0d, 0x96, 0x20, 0x28, 0x4f, 0x48, 0x82, 0x8b, 0x3d, 0x17, 0xa2, 0x52, 0x82, 0x49, 0x81, 0x51,
	0x83, 0x27, 0x08, 0xc6, 0x15, 0x92, 0xe1, 0xe2, 0xcc, 0x2c, 0xf6, 0xc9, 0x4f, 0xcf, 0xcc, 0xf3,
	0xcc, 0x93, 0x60, 0x56, 0x60, 0xd4, 0xe0, 0x08, 0x42, 0x08, 0x08, 0xc9, 0x71, 0x71, 0x41, 0x39,
	0xfe, 0xa5, 0x25, 0x12, 0x2c, 0x60, 0x69, 0x24, 0x11, 0x25, 0x1d, 0x2e, 0x21, 0x34, 0x77, 0x14,
	0xe4, 0x54, 0xe2, 0x72, 0x85, 0x91, 0x1f, 0x17, 0x1b, 0x44, 0xb5, 0x90, 0x0b, 0x9c, 0x25, 0xa3,
	0x07, 0xf5, 0x21, 0x36, 0xff, 0x48, 0x49, 0xe1, 0x90, 0x2d, 0xc8, 0xa9, 0x54, 0x62, 0x70, 0x92,
	0xe2, 0xe2, 0xf4, 0xf4, 0x85, 0x4a, 0x39, 0x71, 0x43, 0xe8, 0x00, 0x50, 0x40, 0x05, 0x30, 0x26,
	0xb1, 0x81, 0x43, 0xcc, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xfc, 0x07, 0x13, 0x29, 0x41, 0x01,
	0x00, 0x00,
}
